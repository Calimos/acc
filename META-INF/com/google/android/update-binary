#!/sbin/sh -x
##########################################################################################
#
# Magisk Module Template Install Script
# by topjohnwu
#
##########################################################################################

# Detect whether in boot mode ###
if pgrep zygote | grep -v grep >/dev/null; then
	BOOTMODE=true
else
	BOOTMODE=false
fi
if ! $BOOTMODE; then
	pgrep -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true
fi

# This path should work in any cases
TMPDIR=/dev/tmp
MOUNTPATH=/magisk
IMG=/data/magisk.img
if $BOOTMODE; then
  MOUNTPATH=/dev/magisk_merge
  IMG=/data/magisk_merge.img
fi
INSTALLER=$TMPDIR/install
MAGISKBIN=/data/magisk

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

##########################################################################################
# Environment
##########################################################################################

OUTFD=$2
ZIP="$3"

ui_print() {
  if $BOOTMODE; then
    echo "$1"
  else
    echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
  fi
}

ui_print " "

require_new_magisk() {
  ui_print "***********************************"
  ui_print "! $MAGISKBIN isn't setup properly!"
  ui_print "! Please install Magisk v14.0+!"
  ui_print "***********************************"
  exit 1
}

ui_print "- Mounting /system, /vendor, /data, /cache"
mount -o ro /system 2>/dev/null
mount -o ro /vendor 2>/dev/null
mount /data 2>/dev/null
mount /cache 2>/dev/null

# Utility functions must exist
[ -f $MAGISKBIN/util_functions.sh ] || require_new_magisk
# Load utility fuctions
. $MAGISKBIN/util_functions.sh
get_outfd

[ ! -f /system/build.prop ] && abort "! /system could not be mounted!"

# Detect version and architecture
api_level_arch_detect

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

# We need busybox/binaries to be setup
if $BOOTMODE; then boot_actions; else recovery_actions; fi

##########################################################################################
# Preparation
##########################################################################################

# Extract module files ###
ui_print " "
ui_print "- Extracting module files"
unzip -o "$ZIP" -d $INSTALLER | grep -Eiv 'archive:|creating:' | sed 's/inf.*://'
ui_print " "

[ ! -f $INSTALLER/config.sh ] && abort "! Unable to extract zip file!"

# Load configurations
. $INSTALLER/config.sh

# Check the min magisk version
MIN_VER=`grep_prop template $INSTALLER/module.prop`
[ ! -z $MAGISK_VER_CODE -a $MAGISK_VER_CODE -ge $MIN_VER ] || require_new_magisk
MODID=`grep_prop id $INSTALLER/module.prop`
MODPATH=$MOUNTPATH/$MODID


# Find ModPath ###
if $BOOTMODE; then
	for loop_device in /dev/block/loop*; do
		if losetup $loop_device 2>/dev/null | grep -q '/magisk.img$'; then
			for MountPoint in `grep $loop_device /proc/mounts | awk '{print $2}' | grep -v '/system'`; do
				if [ -d "$MountPoint/.core" ] || [ -d "$MountPoint/lost+found" ]; then
					MountPoint=$MountPoint
					ModPath=$MountPoint/$MODID
					mkdir $ModPath 2>/dev/null
					break
				fi
			done
		fi
	done
else
	ModPath="$MODPATH"
fi

if $BOOTMODE && ! is_mounted $MountPoint; then abort "! Magisk is not activated!"; fi


# Print mod name
ui_print " "
print_modname

# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"
ui_print " "

##########################################################################################
# Install
##########################################################################################

request_zip_size_check "$ZIP"

if [ -f "$IMG" ]; then
  ui_print "- Found $IMG"
  image_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    newSizeM=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
    ui_print "- Resizing $IMG to ${newSizeM}M"
    $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
  fi
else
  newSizeM=$((reqSizeM / 32 * 32 + 64));
  ui_print "- Creating $IMG with size ${newSizeM}M"
  $MAGISKBIN/magisk --createimg $IMG $newSizeM
fi

ui_print "- Mounting $IMG to $MOUNTPATH"
MAGISKLOOP=`$MAGISKBIN/magisk --mountimg $IMG $MOUNTPATH`
is_mounted $MOUNTPATH || abort "! $IMG mount failed..."


# Migrate data and/or remove obsolete files ###
PersistDir=/data/media/$MODID

if [ -f $ModPath/module.prop ]; then
	CurVersionCode="`grep_prop versionCode $ModPath/module.prop`"
else
	CurVersionCode=0
fi

# Flash same version to uninstall ###
if [ ! -f /data/r ] && [ "`grep_prop versionCode $INSTALLER/module.prop`" -eq "$CurVersionCode" ]; then
	rm -rf $PersistDir $TMPDIR
	if $BOOTMODE; then
		touch $ModPath/remove
		ui_print " "
		ui_print "(i) Reboot to finish uninstall."
		ui_print " "
	else
    	rm -rf $ModPath
 	   recovery_cleanup
		ui_print " "
		ui_print "(i) Module uninstalled."
		ui_print " "
	fi
	exit 0
fi

[ "$CurVersionCode" -lt "201712240" ] && rm -rf $PersistDir
mkdir -p $PersistDir/info 2>/dev/null


# Create mod paths ###
rm -rf $MODPATH 2>/dev/null
mkdir -p $MODPATH/bin
mkdir $MODPATH/config ###
mkdir -p $MODPATH/system/xbin ###

# Copy files ###
ui_print "- Copying files"
mv $INSTALLER/system/xbin/* $MODPATH/system/xbin/ ###
[ -f /data/b ] && mv $MODPATH/system/xbin $MODPATH/system/bin
rm /data/b /data/r 2>/dev/null
mv $INSTALLER/common/config/* $MODPATH/config/ ###
mv $INSTALLER/README.md $INSTALLER/Changelog.md $PersistDir/info/
if echo $ARCH | grep -iq x; then
	mv $INSTALLER/bin/zip_x86 $MODPATH/bin/zip
else
	mv $INSTALLER/bin/zip_arm $MODPATH/bin/zip
fi

# Handle replace folders
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
done

# Auto Mount
$AUTOMOUNT && touch $MODPATH/auto_mount

# prop files
$PROPFILE && cp -af $INSTALLER/common/system.prop $MODPATH/

# Module info ###
cp -af $INSTALLER/module.prop $MODPATH/

if $BOOTMODE; then
  # Update info for Magisk Manager
  mktouch $ModPath/update
  cp -af $INSTALLER/module.prop $ModPath/
fi

# post-fs-data mode scripts
$POSTFSDATA && cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/

# service mode scripts
$LATESTARTSERVICE && cp -af $INSTALLER/common/service.sh $MODPATH/

ui_print "- Setting permissions"
set_permissions

##########################################################################################
# Finalizing
##########################################################################################

$MAGISKBIN/magisk --umountimg $MOUNTPATH $MAGISKLOOP
rmdir $MOUNTPATH

# Shrink the image if possible
image_size_check $IMG
newSizeM=$((curUsedM / 32 * 32 + 64))
if [ $curSizeM -gt $newSizeM ]; then
  ui_print "- Shrinking $IMG to ${newSizeM}M"
  $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
fi

$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

ui_print "- Done"
ui_print " "
exit 0
