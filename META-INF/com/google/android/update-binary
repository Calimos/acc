#!/sbin/sh
##########################################################################################
#
# Magisk Module Template Install Script
# by topjohnwu
#
##########################################################################################

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

# This path should work in any cases
TMPDIR=/dev/tmp
MOUNTPATH=/magisk
IMG=/data/magisk.img
if $BOOTMODE; then
  MOUNTPATH=/dev/magisk_merge
  IMG=/data/magisk_merge.img
fi
INSTALLER=$TMPDIR/install
MAGISKBIN=/data/magisk

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

##########################################################################################
# Environment
##########################################################################################

OUTFD=$2
ZIP="$3"

ui_print() {
  if $BOOTMODE; then
    echo "$1"
  else
    echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
  fi
}

ui_print " "

require_new_magisk() {
  ui_print "***********************************"
  ui_print "! $MAGISKBIN isn't setup properly!"
  ui_print "! Please install Magisk v14.0+!"
  ui_print "***********************************"
  exit 1
}

ui_print "- Mounting /system, /vendor, /data, /cache"
mount -o ro /system 2>/dev/null
mount -o ro /vendor 2>/dev/null
mount /data 2>/dev/null
mount /cache 2>/dev/null

# Utility functions must exist
[ -f $MAGISKBIN/util_functions.sh ] || require_new_magisk
# Load utility fuctions
. $MAGISKBIN/util_functions.sh
get_outfd

$BOOTMODE && ! is_mounted /magisk && abort "! Magisk is not activated!"
[ ! -f /system/build.prop ] && abort "! /system could not be mounted!"

# Detect version and architecture
api_level_arch_detect

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

# We need busybox/binaries to be setup
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

# Extract module files ###
unzip -oqq "$ZIP" -d $INSTALLER

[ ! -f $INSTALLER/config.sh ] && abort "! Unable to extract zip file!"
# Load configurations
. $INSTALLER/config.sh

# Check the min magisk version
MIN_VER=`grep_prop template $INSTALLER/module.prop`
[ ! -z $MAGISK_VER_CODE -a $MAGISK_VER_CODE -ge $MIN_VER ] || require_new_magisk
MODID=`grep_prop id $INSTALLER/module.prop`
MODPATH=$MOUNTPATH/$MODID

# Print mod name
print_modname

# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

##########################################################################################
# Install
##########################################################################################

request_zip_size_check "$ZIP"

if [ -f "$IMG" ]; then
  ui_print "- Found $IMG"
  image_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    newSizeM=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
    ui_print "- Resizing $IMG to ${newSizeM}M"
    $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
  fi
else
  newSizeM=$((reqSizeM / 32 * 32 + 64));
  ui_print "- Creating $IMG with size ${newSizeM}M"
  $MAGISKBIN/magisk --createimg $IMG $newSizeM
fi

ui_print "- Mounting $IMG to $MOUNTPATH"
MAGISKLOOP=`$MAGISKBIN/magisk --mountimg $IMG $MOUNTPATH`
is_mounted $MOUNTPATH || abort "! $IMG mount failed..."


# Find IMG mount point ###
for i in 0 1 2 3 4 5 6 7; do
  losetup /dev/block/loop$i 2>/dev/null | grep -q '/data/magisk.img' \
    && ModPath="`grep "/dev/block/loop$i" /proc/mounts | cut -d' ' -f2 | grep -v '^/system'`/$MODID" \
    && break
done
[ -z "$ModPath" ] && abort "! $IMG mount point not found"


# Migrate data and/or remove obsolete files ###
persist_dir=/data/media/$MODID
[ -f $ModPath/module.prop ] && CurVersionCode="`grep_prop versionCode $ModPath/module.prop`" \
	|| CurVersionCode=0

# Flash same version to uninstall ###
if [ ! -f /data/r ] && [ "`grep_prop versionCode $INSTALLER/module.prop`" -eq "$CurVersionCode" ]; then
  rm -rf $persist_dir $TMPDIR
  if $BOOTMODE; then
    touch $ModPath/remove
  else
    rm -rf $ModPath
    recovery_cleanup
  fi
  $BOOTMODE && exec echo -e "\n(i) Reboot to finish uninstall.\n" \
		|| exec ui_print "\n(i) Module uninstalled.\n"
fi

[ "$CurVersionCode" -lt '201712150' ] && rm -rf $persist_dir
mkdir -p $persist_dir/info 2>/dev/null


# Create mod paths ###
rm -rf $MODPATH 2>/dev/null
mkdir -p $MODPATH/bin

# Copy files ###
ui_print "- Copying files"
mv $INSTALLER/system $MODPATH/
[ -f /data/x ] && mv $MODPATH/system/bin $MODPATH/system/xbin
rm /data/r /data/x 2>/dev/null
mv $INSTALLER/common/config $MODPATH/
mv $INSTALLER/README.md $INSTALLER/Changelog.md $persist_dir/info/
echo $ARCH | grep -iq x && \
	mv $INSTALLER/bin/zip_x86 $MODPATH/bin/zip \
	|| mv $INSTALLER/bin/zip_arm $MODPATH/bin/zip

# Handle replace folders
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
done

# Auto Mount
$AUTOMOUNT && touch $MODPATH/auto_mount

# prop files
$PROPFILE && cp -af $INSTALLER/common/system.prop $MODPATH/

# Module info ###
cp -af $INSTALLER/module.prop $MODPATH/

if $BOOTMODE; then
  # Update info for Magisk Manager
  mktouch $ModPath/update
  cp -af $INSTALLER/module.prop $ModPath/
fi

# post-fs-data mode scripts
$POSTFSDATA && cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/

# service mode scripts
$LATESTARTSERVICE && cp -af $INSTALLER/common/service.sh $MODPATH/

ui_print "- Setting permissions"
set_permissions

##########################################################################################
# Finalizing
##########################################################################################

$MAGISKBIN/magisk --umountimg $MOUNTPATH $MAGISKLOOP
rmdir $MOUNTPATH

# Shrink the image if possible
image_size_check $IMG
newSizeM=$((curUsedM / 32 * 32 + 64))
if [ $curSizeM -gt $newSizeM ]; then
  ui_print "- Shrinking $IMG to ${newSizeM}M"
  $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
fi

$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

ui_print "- Done"
ui_print " "
exit 0
