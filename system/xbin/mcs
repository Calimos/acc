#!/system/bin/sh
# Magic Charging Switch (mcs)
# VR25 @ xda-developers



# ENVIRONMENT & TOOLBOX

export PATH="/sbin/.core/busybox:/dev/magisk/bin:$PATH"
ModID=cs
echo


is() { [ -$1 "$2" ]; }
n() { [ -n "$1" ]; }
z() { [ -z "$1" ]; }


PersistDir="/data/media/mcs"
config="$PersistDir/config"
SYSTEM=/system
is d /system_root && SYSTEM=/system_root/system


is d $PersistDir || mkdir $PersistDir


get_prop() {
	FILE="$2"
	z "$FILE" && FILE="$config"
	sed -n "s|^$1=||p" "$FILE" 2>/dev/null
}


set_prop() { sed -i "s|^$1=.*|$1=$2|g" "$config"; }


# Find ModPath
for dir in /sbin/.core/img/$ModID /magisk/$ModID; do
  if [ -f "$dir/module.prop" ]; then
    ModPath=$dir
    DefaultConfig=$ModPath/config/mcs
    break
  fi
done

if ! is f "$ModPath/module.prop"; then
  echo -e "(!) $ModID path not found"
  echo -e "- Unsupported Magisk version or not running as root (su)\n"
  exit 1
fi


# Device ID
TestGroup="ro.product.device ro.build.product"
for i in $TestGroup; do
	Model="$(get_prop $i $SYSTEM/build.prop)"
	n "$Model" && break || Model="Generic"
done
DEVICE="$(get_prop ro.product.brand $SYSTEM/build.prop)_$Model"


mcsVersion="$(get_prop versionCode $ModPath/module.prop)"


# Verbose logger
verbose_log="$PersistDir/mcs_verbose-${DEVICE}.log"
last_verbose_log="$PersistDir/last-mcs_verbose-${DEVICE}.log"
is f "$verbose_log" && mv "$verbose_log" "$last_verbose_log"
{ grep -i product $SYSTEM/build.prop
echo -e "\nmcsVersion=$mcsVersion\n"; } >"$verbose_log"
set -x 2>>"$verbose_log"


debug() {
	set +x
	echo "(i) Gathering debugging data..."
	rm /sdcard/mcs_debug*log 2>/dev/null
	
	exec 3>&1
	exec >/sdcard/mcs_debug-${DEVICE}-${mcsVersion}-$(date +%Y%m%d%H%M%S).log
	
	grep -i product $SYSTEM/build.prop
	echo -e "\nmcsVersion=$mcsVersion\n\n\n"
	
	echo "##############################"
	echo "/sys/class/power_supply/*"
	echo -e "##############################\n"
	generate_sys_cache
	cat $PersistDir/sys_cache
	echo -e "\n\n\n"
	
	echo "##############################"
	echo "uevent"
	echo -e "##############################\n"
	generate_sys_cache no_val
	for uevent_file in $(grep -i 'battery/uevent' $PersistDir/sys_cache); do
		chmod +r "$uevent_file"
		if grep -i '^POWER_SUPPLY_NAME=' "$uevent_file" | grep -Eiq 'battery$|smb.*\-battery$'; then
			echo "[$uevent_file]"
			cat "$uevent_file"
			echo
		fi
	done
	echo -e "\n\n"
	
	for file in $PersistDir/*; do
		if is f "$file" && ! echo "$file" | grep -q 'sys_cache'; then
			echo "##############################"
			echo "$file"
			echo -e "##############################\n"
			cat "$file"
			echo -e "\n\n"
		fi
	done
	
	exec 1>&3 3>&-

	echo -e "- Done."
	echo "- Generated file: /sdcard/mcs_debug-${DEVICE}-${mcsVersion}-$(date +%Y%m%d%H%M%S).log\n"
	rm $PersistDir/sys_cache
	exit 0
}



# CHARGING CONTROL FUNCTIONS

# Charging info
c_info() {
	grep -vE 'NAME|STATUS|PRESENT|HEALTH|COUNTER|CAPACITY_LEVEL' "$(UEVENT)" \
		| sed 's/POWER_SUPPLY_//' \
		| sed 's/CAPACITY/LEVEL/' \
		| sed '/LEVEL=/s/$/%/' \
		| sed 's/_NOW//' \
		| sed '/RGE_R/s/GE/GING/'
	echo
}


# Charging loop
c_loop() {
	$(get_prop loop_verbose) || set +x
	SWITCH ON
	while :; do
		until [ "$(batt_level)" -ge "$1" ]; do
			clear
			echo "Charging to $1%..."
			echo -e "$start_time\n"
			c_info
			echo "(i) Press CTRL (Vol. Down) + C to abort."
			sleep 25
		done

		SWITCH OFF
		echo -e "\n(i) Desired charge % reached."
		end_time
		
		# Reset battery stats
		dumpsys batterystats --reset &>/dev/null
		
		echo -e "- Charging paused.\n"
		echo "(i) Waiting until $(lower_limit)% to restart the cycle..."
		echo "- Press CTRL (Vol. Down) + C to abort."
		
		until [ "$(batt_level)" -le "$(lower_limit)" ]; do
			sleep 25
		done
		
		SWITCH ON
	done
	exit 0
}


check_compatibility() {
	echo "(i) Checking compatibility..."

	# Preparation
	generate_sys_cache no_val


	# Test 1 -- uevent
	for uevent_file in $(grep -i 'battery/uevent' $PersistDir/sys_cache); do
		chmod +r "$uevent_file"
		if grep -i '^POWER_SUPPLY_NAME=' "$uevent_file" | grep -Eiq 'battery$|smb.*\-battery$'; then
			set_prop UEVENT "$uevent_file"
			break
		fi
	done


	# Test 2 -- charging switch
	if is f "$(UEVENT)"; then

		if ! charging; then
			echo "- Waiting for charger..."
			until charging; do sleep 5; done
			echo "-- Charger detected"
			echo "- Please wait..."
		fi
		
		for ctrl_file in $(grep -Ev '#|^$' $ModPath/config/switches); do
			for ctrl_file_ in $(grep "$ctrl_file" $PersistDir/sys_cache); do
				if is f "$ctrl_file_"; then
					chmod +r "$ctrl_file_"
					set_switch "$ctrl_file_"
					[ "$?" = "3" ] && continue
					if n "$(get_prop OFF_key)"; then
						SWITCH OFF
						sleep 2
						charging || break
					fi
				fi
			done
			if ! charging; then
				SWITCH ON
				sleep 2
				charging && break || set_switch
			else
				n "$(get_prop ON_key)" && SWITCH ON
				set_switch
			fi
		done
	fi


	# Verdict
	if ! is f "$(SWITCH)"; then
		echo -e "- (!) Unsupported device\n"
		debug
	else
		echo -e "- Congratulations, your device is supported!\n"
		rm $PersistDir/sys_cache
		sleep 2
	fi
}


exxit() {
	if z "$1"; then
		echo "(!) Invalid option/argument"
		echo -e "- Run \"mcs -h\" for help\n"
		exit 1
	else
		echo -e "\n(!) Error at line $1\n"
		exit 1
	fi
}


set_switch() {
	if n "$1"; then
		set_prop SWITCH "$1"
		case $(cat "$(SWITCH)") in
			1) set_prop ON_key 1; set_prop OFF_key 0;;
			0) set_prop ON_key 0; set_prop OFF_key 1;;
			on) set_prop ON_key on; set_prop OFF_key off;;
			off) set_prop ON_key off; set_prop OFF_key on;;
			100) set_prop ON_key 100; set_prop OFF_key 3;;
			true) set_prop ON_key true; set_prop OFF_key false;;
			false) set_prop ON_key false; set_prop OFF_key true;;
			enable) set_prop ON_key enable; set_prop OFF_key disable;;
			disable) set_prop ON_key disable; set_prop OFF_key enable;;
			enabled) set_prop ON_key enabled; set_prop OFF_key disabled;;
			disabled) set_prop ON_key disabled; set_prop OFF_key enabled;;
			Charging) set_prop ON_key Charging; set_prop OFF_key Discharging;;
			*) return 3;;
		esac 2>/dev/null
	else
		# Reset values back to null
		set_prop SWITCH
		set_prop ON_key
		set_prop OFF_key
	fi
}


SWITCH() {
	if z "$1"; then
		get_prop SWITCH
	else
		chmod +rw "$(SWITCH)"
		case $1 in
			ON) echo "$(get_prop ON_key)" >"$(SWITCH)";;
			OFF) echo "$(get_prop OFF_key)" >"$(SWITCH)";;
		esac
	fi
}


OFF_time() {
	if $invert_OFF; then SWITCH ON; else SWITCH OFF; fi
	if n "$1"; then
		if echo "$1" | grep -q '[a-z]'; then
		
			if $invert_OFF; then
				echo "(i) Charging enabled for $1."
			else
				echo "(i) Charging disabled for $1."
			fi
			start_time
			
			if echo "$1" | grep -q 'm'; then
				sleep $(( 60 * $(echo $1 | sed 's/m//') ))
			elif echo "$1" | grep -q 'h'; then
				sleep $(( 3600 * $(echo $1 | sed 's/h//') ))
			else exxit
			fi
		elif ! echo "$1" | grep -q '[a-z]' \
			&& echo "$1" | grep -q '[0-9]'; then
			
			if $invert_OFF; then
				echo "(i) Charging enabled for $1s."
			else
				echo "(i) Charging disabled for $1s."
			fi
			start_time
			sleep $1
		fi
		echo
		echo "(i) Timeount reached."
		
		if $invert_OFF; then
			SWITCH OFF
			echo "- Charging disabled."
		else
			SWITCH ON
			echo "- Charging re-enabled"
		fi
		end_time

	else
		if $invert_OFF; then
			echo "(i) Charging enabled."
		else
			echo "(i) Charging disabled."
		fi
	fi
	echo
}


OFF_percent() {
	if $invert_OFF; then
		SWITCH ON
		echo "(i) Charging enabled until $1."
	else
		SWITCH OFF
		echo "(i) Charging disabled until $1."
	fi
	start_time

	echo
	until [ "$(batt_level)" -ge "$(echo $1 | sed 's/%//')" ]; do
		sleep 25
	done
	echo "(i) Desired % reached."
		
	if $invert_OFF; then
		SWITCH OFF
		echo "- Charging disabled."
	else
		SWITCH ON
		echo "- Charging re-enabled"
	fi
	end_time
	echo
}


auto_run() { get_prop auto_run; }

batt_level() { get_prop POWER_SUPPLY_CAPACITY "$(UEVENT)"; }

charging() { grep -iqs '=charging$' "$(UEVENT)"; }

end_time() { echo "- End time: $(date)"; }

higher_limit() { get_prop higher_limit; }

lower_limit() { get_prop lower_limit; }

pause_svc() { get_prop pause_svc; }

start_time() { echo "- Start time: $(date)"; }

UEVENT() { get_prop UEVENT; }


update_cfg() {
	if z "$1"; then
		set_prop higher_limit 90
		set_prop lower_limit 80
	else
		if n "$2"; then
			set_prop higher_limit "$1"
			set_prop lower_limit "$2"
		else 
			set_prop higher_limit "$1"
			set_prop lower_limit 80
		fi
	fi
}


generate_sys_cache() {
	for e in /sys/class/power_supply/*; do
		for file in $(find "$(readlink -f "$e")" -type f 2>/dev/null); do
			chmod +r "$file"
			if z "$1"; then
				echo "$file [$(cat "$file" 2>/dev/null | head -n1)]"
			else
				echo "$file"
			fi
		done
		echo
	done >$PersistDir/sys_cache
}


# SELF-CHECK
if ! echo "$1 $2" | grep -Eq '\-x|\-h|\-r|debug'; then
	if ! is f "$(SWITCH)" || ! is f $config; then
		cp $DefaultConfig $config
		check_compatibility
	fi
	if ! $(auto_run) || $(pause_svc); then
		start_time="$(start_time)"
	fi
	invert_OFF=false
fi



# OPTIONS MENU
case $1 in

	# Manually set a charging switch or pick one from the database
	-x)
		echo "(i) Please wait..."
		generate_sys_cache no_val
		for uevent_file in $(grep -i 'battery/uevent' $PersistDir/sys_cache); do
			chmod +r "$uevent_file"
			if grep -i '^POWER_SUPPLY_NAME=' "$uevent_file" | grep -Eiq 'battery$|smb.*\-battery$'; then
				set_prop UEVENT "$uevent_file"
				break
			fi
		done

		if ! is f "$(UEVENT)"; then
			echo -e "(!) Unsupported device\n"
			debug
		fi
		
		if n "$2"; then
			set_switch "$2"
			if n "$4"; then
				set_prop ON_key $3
				set_prop OFF_key $4
			fi
			echo -e "- Charging switch set successfully.\n"
		
		else
			echo "- Fetching known control files for ${DEVICE}..."
			: >$PersistDir/.csx
			Count=0

			if ! charging; then
				echo "-- Waiting for charger..."
				until charging; do sleep 5; done
				echo "--- Charger detected"
				echo "-- Please wait..."
			fi

			echo
			is f $(SWITCH) || set_switch dummy_switch

			for ctrl_file in $(grep -Ev '#|^$' $ModPath/config/switches); do
				for ctrl_file_ in $(grep "$ctrl_file" $PersistDir/sys_cache | grep -v "$(SWITCH)"); do
					if is f "$ctrl_file_"; then
						((Count++))
						echo -e "[$Count] $ctrl_file_\n" >>$PersistDir/.csx
					fi
				done
			done

			if grep -q '[a-z]' $PersistDir/.csx; then
				cat $PersistDir/.csx
				echo "(i) Pick a number..."
				echo "- Input nothing or press CTRL (Vol. Down) + C to cancel"
				read Input
				if n "$Input"; then
					set_switch "$(grep "\[${Input}\] " $PersistDir/.csx | awk '{print $2}')"
					echo -e "\n(i) New switch set successfully.\n"
				fi
			else
				echo -e "\n(i) No additional switch(es) found\n"
			fi

		fi
		rm $PersistDir/.csx $PersistDir/sys_cache 2>/dev/null
		is f $(SWITCH) || set_switch
		exit 0
		;;


	debug) debug;;


	# Toggle service state
	-s)
		if [ "$2" = "--disable" ]; then
			set_prop auto_run false
			set_prop pause_svc false
			echo "(i) MCS service disabled."
		elif [ "$2" = "--enable" ]; then
			set_prop auto_run true
			set_prop pause_svc false
			echo "(i) MCS service enabled."
			echo "- Reboot to apply change if it's being ran by Magisk daemon."
		else
			if $(pause_svc); then
				set_prop pause_svc false
				SWITCH ON
				echo "(i) MCS service resumed."
			else
				set_prop pause_svc true
				echo "(i) MCS service paused."
			fi
		fi
		echo
		exit 0
		;;


	# Toggle extensive (loops) verbose
		-v)
		if $(get_prop loop_verbose); then
			set_prop loop_verbose false
			echo -e "(i) Loop verbose disabled"
		else
			set_prop loop_verbose true
			echo -e "(i) Loop verbose enabled"
		fi
		echo
		exit 0
		;;


	# Keep/maintain battery power at a constant level
	-k)
		$(get_prop loop_verbose) || set +x
		if $(auto_run) && ! $(pause_svc); then
			set_prop pause_svc true
			echo "(i) MCS service paused."
			echo -e "- Reboot or run \"mcs -s\" to resume.\n"
		fi
		
		echo "Maintaining $2%..."
		echo "(i) Press CTRL (Vol. Down) + C to abort."
		SWITCH ON

		while :; do

			until [ "$(batt_level)" -ge "$2" ] || ! charging; do
				sleep 25
			done

			[ "$(batt_level)" -ge "$2" ] && SWITCH OFF
		
			until [ "$(batt_level)" -le "$2" ] || charging; do
				sleep 25
			done

			[ "$(batt_level)" -le "$2" ] && SWITCH ON

		done
		exit 0
		;;


	# Reset battery stats on demand
	-b)
		dumpsys batterystats --reset
		echo
		exit 0
		;;
	


	# Reset MCS settings
	-r)
		cp $DefaultConfig $config \
			&& { echo -e "(i) MCS settings reset successfully.\n"; exit 0; } \
			|| { echo -e "(!) MCS settings reset failed.\n"; exit 1; }
		;;



	# MCS service
	service)
		$(get_prop loop_verbose) || set +x
		if $(auto_run); then
			set_prop pause_svc false
			SWITCH ON
		else
			exit 0
		fi
		while $(auto_run); do
			$(pause_svc) && sleep 25
			until $(pause_svc); do
				if [ "$(batt_level)" -le "$(lower_limit)" ] \
				&& [ "$(get_prop OFF_key)" = "$(cat "$(SWITCH)")" ]; then
					SWITCH ON
				fi
				sleep 12
				if [ "$(batt_level)" -ge "$(higher_limit)" ] \
				&& [ "$(get_prop ON_key)" = "$(cat "$(SWITCH)")" ]; then
					SWITCH OFF
					dumpsys batterystats --reset &>/dev/null
				fi
				sleep 12
			done
		done
		exit 0
		;;



	# Usage instructions
	--help|-h|help)
		set +x
		cat <<EOD
Magic Charging Switch (mcs)

Automatically pauses/resumes charging at set time intervals and/or % levels to extend battery lifespan.


Usage:

mcs [-b] [-h] [-i] [-r] [-v] [debug] [-k LEVEL] [PAUSE% RESUME%] [PAUSE%] [-m/t PAUSE% RESUME%] [-s --enable/disable] [-d/e %/TIMEOUT] [-x /path/to/switch ON_key OFF_key]

-b --> reset battery stats on demand (does not work on all devices)

-i --> display battery info

-r --> reset settings

-s --> pause/resume, --enable/disable service

-v --> toggle extensive (loops) verbose

-x --> pick a charging switch from the database

debug --> gather debugging data & save it to /sdcard/mcs_debug-\$DEVICE-\$csVER-\$DATE.log

-k LEVEL --> keep/maintain battery power at a constant LEVEL (pauses MCS service)

[no args] --> run mcs with default/previous settings

-h/--help/help --> usage instructions

PAUSE% RESUME% --> pause charging at PAUSE% value (default 90); resume if battery drops below RESUME% (default 80). This is the INITIAL SETUP COMMAND. If auto-run is OFF, the command works as is; else, new settings are saved and automatically picked up by MCS service.

-m/-t PAUSE% RESUME% --> generate automation config (-m for MacroDroid; -t for Tasker -- pick one)

-d/e [%/TIMEOUT (optional)] --> disable/enable charging on demand (pauses MCS service)

-x /path/to/switch ON_key OFF_key -- > manually set a charging switch; if keys match one of the following as is or in reverse oder -- you don't have to specify them: 1/0, enable/disable, enabled/disabled, true/false, on/off, 100/3


Usage Examples/Tips

"mcs 90" --> pause charging at 90%; resume when battery level is less or equal to 80% (default).

"mcs 80 20" --> pause charging at 80%; resume when battery level is less or equal to 20%.

"mcs -d" --> disable charging.

"mcs -d" --> enable charging. 

"mcs -d 30m" --> keep charging disabled for 30 minutes.

"mcs -e 1h" --> keep charging enabled for 1 hour. 

"mcs -e 80%" --> Charge until battery level equals 80%.

"mcs -d 40%" --> Charge until battery level equals 40%.

"mcs -e 120 && mcs -d 30m && mcs -e 1h" --> charge for 120 seconds, pause for 30 minutes, then charge again for 1h.

"mcs -e 30m && mcs -d 30m && mcs -e 90%" --> charge for 30 minutes, pause for 30 minutes, then charge again, but this time until battery level is greater or equal to 90%.

"mcs -e 50% && mcs -d 5h && mcs -e 80% && mcs -d 30m && mcs -e 90%" --> charge until 50%, pause for 5 hours, charge until 80%, pause for 30 minutes, charge until 90%.

Ideally, you want your battery level between 40-60% - best, 20-80% - average, 10-90% - fair.

For best convenience, stick with mcs 90 80; mcs 80 70 for a perfect balance between convenience & battery wear. If you want the longest battery lifespan, use mcs 42 41 or mcs -k 42 (best for prolonged usage -- i.e., navigation).
EOD
	echo
	exit 0
	;;


	# Disable charging on demand
	-d)
		if $(auto_run) && ! $(pause_svc); then
			set_prop pause_svc true
			echo -e "(i) MCS service paused.\n"
		fi
		
		if n "$2"; then
			case $2 in
				*[0-9]%) OFF_percent $2;;
				*) OFF_time $2;;
			esac
		else OFF_time; fi

		if $(auto_run) && $(pause_svc); then
			echo -e "(i) Reboot or run \"mcs -s\" to resume MCS service.\n"
		fi
		exit 0
		;;


	# Enable charging on demand
	-e)
		if $(auto_run) && ! $(pause_svc); then
			set_prop pause_svc true
			echo "(i) MCS service paused.\n"
		fi
		
		invert_OFF=true
		if n "$2"; then
			case $2 in
				*[0-9]%) OFF_percent $2;;
				*) OFF_time $2;;
			esac
		else OFF_time; fi
		
		if $(auto_run) && $(pause_svc); then
			echo -e "(i) Reboot or run \"mcs -s\" to resume MCS service.\n"
		fi
		exit 0
		;;


	# Battery & settings info
	-i)
		echo 'Battery Info'
		grep -Ev 'NAME|PRESENT|CAPACITY_LEVEL' "$(UEVENT)" \
			| sed 's/POWER_SUPPLY_//' \
			| sed 's/CAPACITY/LEVEL/' \
			| sed '/LEVEL=/s/$/%/' \
			| sed 's/_NOW//' \
			| sed '/RGE_R/s/GE/GING/'
		echo -e "\n\nMCS Settings"
		cat $config | grep -v MCS
		echo
		exit 0
		;;


	# Run with default/saved settings (no args)
	"")
		if $(auto_run) && ! $(pause_svc); then
			echo -e "(i) MCS service is already running.\n"
			exit 0
		fi

		c_loop $(higher_limit)
		;;


	# Generate MacroDroid & Tasker automation configs
	-m|-t)
		case $1 in
			-m)
				echo "(i) Generating /sdcard/MacroDroid/charging_switch.category..."
				mdir=/sdcard/MacroDroid
				is d $mdir || mkdir -p $mdir
				cp /magisk/cs/config/macrodroid $mdir/charging_switch.category
				cd $mdir
				sed -i "s/:90/:$2/; s/:11/:$3/" charging_switch.category
				;;

			-t)
				echo "(i) Generating /sdcard/Tasker/projects/charging_switch.prj.xml..."
				tdir=/sdcard/Tasker/projects
				is d $tdir || mkdir -p $tdir
				cp /magisk/cs/config/tasker $tdir/charging_switch.prj.xml
				cd $tdir
				sed -i "/<Int sr=\"arg0\" val=\"90\"\/>/s/90/$2/" charging_switch.prj.xml
				sed -i "/<rhs>90<\/rhs>/s/90/$2/" charging_switch.prj.xml
				sed -i "/<Int sr=\"arg1\" val=\"10\"\/>/s/10/$3/" charging_switch.prj.xml
				sed -i "/<rhs>10<\/rhs>/s/10/$3/" charging_switch.prj.xml
				;;

			*) exxit;;
		esac

		echo -e "- Done.\n"
		exit 0
		;;


	# Run with all parameters (initial setup)
	[0-9]*)
		update_cfg $1 $2
		echo "(i) New settings saved."
		sleep 1

		if $(auto_run) && ! $(pause_svc); then
			echo "- MCS service is already running."
			echo -e "-- Now working with the new values.\n"
			SWITCH ON
			exit 0
		fi

		c_loop $1
		;;


	*) exxit;;
esac
