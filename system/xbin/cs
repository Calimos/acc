#!/system/bin/sh
# Magic Charging Switch (cs)
# VR25 @ XDA Developers


# ENVIRONMENT
mod_dir=/magisk/cs
config=$mod_dir/.config/cs
tmp_dir=$mod_dir/.tmp
sON_info=$tmp_dir/sON_info
invert_OFF=false
export PATH=/dev/magisk/bin:/magisk/cs/bin:$PATH
echo



# TOOLBOX

c_info() {
	cat "$i" | grep -vE 'NAME|STATUS|PRESENT|HEALTH|COUNTER|CAPACITY_LEVEL' \
		| sed 's/POWER_SUPPLY_//' \
		| sed 's/CAPACITY/LEVEL/' \
		| sed '/LEVEL=/s/$/%/' \
		| sed 's/_NOW//' \
		| sed '/RGE_R/s/GE/GING/'
}


c_loop() {
	echo
	echo "(i) Desired charge % reached."
	sOFF
	
	### Gotta find a working way of clearing battery stats on Nougat
	#rm -f /data/system/batterystats.bin 2>/dev/null
	
	rm -f $sON_info
	echo $c_OFF > $s
	if echo "$p0" | grep -q [0-9]; then
		echo "- Maintaining $p0-$p%..."
		until [ "$batt_level" -le "$p0" ]; do
			get_batt_level
			[ "$batt_level" -le "25" ] && sleep 300 || sleep 600
		done
		cs
	else
		echo "- Press RETURN to re-enable charging & exit"
		read INPUT
		echo $c_ON > $s
		exit 0
	fi
}


get_ctrl_files() {
	if [ -f $mod_dir/.config/ctrl ]; then . /$mod_dir/.config/ctrl
		if [ ! -f "$s" ]; then
			echo "(!) cs: ctrl file $s not found"
			if [ "$i" ]; then [ -f "$i" ] || echo "(!) cs: info file $i not found"; fi
			sleep 2
			echo
			debug
		fi
		
		if [ "$i" ]; then
			if [ ! -f "$i" ]; then
				echo "(!) cs: info file $i not found"
				sleep 2
				echo
				debug
			fi

		else
			i=/sys/devices/platform/battery/power_supply/battery/uevent
			[ -f "$i" ] || i="$(dirname "$s")/uevent"
			if [ ! -f "$i" ]; then
				echo "(!) cs: info file not specified"
				sleep 2
				echo
				debug
			fi
		fi
		
		if [ ! -f "$s" ] || [ ! -f "$i" ]; then rm $mod_dir/.config/ctrl; fi
		
	else
		if [ -f $config ]; then . $config
		else
			if device 'Pixel|HTC' && ! device klte; then switch "s=/sys/devices/soc/qpnp-smbcharger-16/power_supply/battery/charging_enabled"
				[ -f "$s" ] || switch s=/sys/devices/platform/htc_battery/power_supply/battery/charging_enabled
			elif device Samsung; then switch store_mode 0 1
				[ -f "$s" ] || switch s=/sys/devices/platform/battery/power_supply/battery/store_mode 0 1
				[ -f "$s" ] || switch s=/sys/devices/battery/power_supply/battery/store_mode 0 1
			elif device Huawei; then switch s=/sys/class/hw_power/charger/charge_data/enable_charger
				[ -f "$s" ] || switch s=/sys/devices/platform/huawei_charger/enable_charger
				[ -f "$s" ] || switch "s=/sys/devices/amba.13/f7100000.i2c/i2c-0/0-006b/enable_charger"
				[ -f "$s" ] || switch "s=/sys/devices/soc.0/qpnp-smbcharger-17/power_supply/battery/charging_enabled"
			elif device 'Amazon Fire'; then switch "device/Charging_Enable"
			elif device mako; then switch s=/sys/module/pm8921_charger/parameters/disabled 0 1
			elif device mantaray; then switch "s=/sys/devices/virtual/power_supply/manta-battery/charge_enabled"
				[ -f "$s" ] || switch "s=/sys/devices/platform/s3c2440-i2c.2/i2c-2/2-0006/power_supply/smb347-battery/charge_enabled"
			elif device Nvidia; then switch "s=/sys/devices/platform/7000c400.i2c/i2c-1/1-006b/charging_state" enabled disabled
			elif device Xiaomi; then switch input_suspend 0 1
				[ -f "$s" ] || switch s=/sys/class/power_supply/bq2589x_charger/enable_charging
				[ -f "$s" ] || switch s=/sys/devices/platform/battery/ChargerEnable
				[ -f "$s" ] || switch "s=/sys/devices/platform/7000c400.i2c/i2c-1/1-006b/charging_state" enabled disabled
			elif device Sony; then switch s=/sys/class/qns/charging_state
			elif device hammerhead; then switch s=/sys/class/power_supply/ac/charging_enabled
				[ -f "$s" ] || switch "s=/sys/devices/f9923000.i2c/i2c-84/84-006b/power_supply/ac/charging_enabled"
			elif device 'Teclast X98 Air III'; then switch s=/sys/class/power_supply/dollar_cove_charger/present
			elif device 'Nexus 9'; then switch "s=/sys/devices/platform/tegra12-i2c.0/i2c-0/0-006b/charging_state" enabled disabled
			elif device 'Galaxy Nexus'; then switch charge_enabled
			elif device LeEco; then switch s=/sys/devices/platform/mt-battery/disable_charger 0 1
			elif device piranha; then switch s=/sys/devices/platform/battery_manager/power_supply/battery/online
			elif device klte; then switch "s=/sys/devices/battery.98/power_supply/battery/store_mode" 0 1
			elif device OnePlus; then switch "s=/sys/devices/soc/qpnp-smbcharger-17/power_supply/battery/charging_enabled"
			elif device Asus; then switch "s=/sys/devices/i2c-0/0-0055/battery_smbus"
			fi
			
			# Devices confirmed working with standard/generic control files:
			# - Some OnePlus phones, Moto Z Play, Sony Xperia Z5 Premium
			
			# It seems this ctrl file is the most common among devices running stock/near-stock Android.
			[ -f "$s" ] || switch charging_enabled
			
			[ -f "$s" ] || switch battery_charging_enabled
			if [ ! -f "$s" ]; then echo "(!) cs: Unsupported device"
				sleep 2
				echo
				debug
			fi
			
			
			# Battery info
			if device mako; then
				i="/sys/devices/platform/msm_ssbi.0/pm8921-core/pm8921-charger/power_supply/battery/uevent"
			elif device mantaray; then
				i="s=/sys/devices/platform/s3c2440-i2c.2/i2c-2/2-0006/power_supply/smb347-battery/uevent"
			elif device Huawei; then
				i=/sys/devices/platform/battery/power_supply/Battery/uevent
				[ -f "$i" ] || i="/sys/devices/battery.0/power_supply/Battery/uevent"
			elif device 'mantaray|Nexus 10'; then
				i"=/sys/devices/platform/s3c2440-i2c.2/i2c-2/2-0006/power_supply/smb347-battery/uevent"
			elif device Xiaomi; then
				i="/sys/devices/platform/7000c400.i2c/i2c-1/1-0055/power_supply/battery/uevent"
			elif device LeEco; then
				i=/sys/devices/platform/battery/power_supply/battery/uevent
			elif device Nvidia; then
				i="/sys/devices/platform/7000c400.i2c/i2c-1/1-000b/power_supply/battery/uevent"
			elif device Asus; then i="/sys/devices/i2c-0/0-0055/power_supply/battery/uevent"
			fi
			
			[ -f "$i" ] || i=/sys/devices/platform/battery/power_supply/battery/uevent
			[ -f "$i" ] || i="$(dirname "$s")/uevent"
			if [ ! -f "$i" ]; then echo "(!) cs: Unsupported device"
				sleep 2
				echo
				debug
			fi
		fi
	fi
}


get_batt_level() { echo "batt_level=$(cat $(dirname "$i")/capacity)" > $tmp_dir/batt_level
	. $tmp_dir/batt_level
}


debug() {
	echo "(i) Gathering debugging data..."
	rm -rf /data/cs_debug* /sdcard/cs_debug* 2>/dev/null
	mkdir /data/cs_debug
	cd /data/cs_debug
	grep -i product /system/build.prop > cs_debug.log
	echo >> cs_debug.log
	zip -9qqu cs_debug.zip cs_debug.log 2>/dev/null
	
	for f in $(find /sys 2>/dev/null \
		| grep -Ev 'sys/kernel|sys/bus|sys/firmware|/sys/fs' \
		| grep -Ei 'batt|charg'); do
		if [ -f "$f" ]; then
			echo "$f" >> cs_debug.log
			zip -9qqu cs_debug.zip "$f" 2>/dev/null
		fi
	done

	mv cs_debug.zip /sdcard
	mv cs_debug.log /sdcard
	chmod 777 /sdcard/cs_debug*
	rm -rf /data/cs_debug 2>/dev/null
	echo "- Done."
	echo
	echo "(i) Please upload /sdcard/cs_debug.zip to the official XDA thread."
	echo
	exit 0
}


exxit() {
	echo "(!) cs: Invalid option/argument"
	sleep 2
	cs --help
}


device() { grep -Eiq "$1" /system/build.prop; }
sON() { echo "- S/ON --> $(date)"; }
sOFF() { echo "- S/OFF --> $(date)"; }

switch() {
	echo "$1" | grep -q 's=' && s="$(echo "$1" | cut -d= -f2)" \
	|| s=/sys/class/power_supply/battery/"$1"
	if [ "$2" ]; then
		c_ON=$2
		c_OFF=$3
	else
		c_ON=1
		c_OFF=0
	fi
}


OFF() {
	$invert_OFF && echo $c_ON > $s || echo $c_OFF > $s
	if [ "$1" ]; then
		if echo "$1" | grep -q '[a-z]'; then
		
			if $invert_OFF; then
				echo "(i) Charging enabled for $1."
				sON
			else
				echo "(i) Charging disabled for $1."
				sOFF
			fi
			
			if echo "$1" | grep -q 'm'; then
				sleep $(( 60 * $(echo $1 | sed 's/m//') ))
			elif echo "$1" | grep -q 'h'; then
				sleep $(( 3600 * $(echo $1 | sed 's/h//') ))
			else exxit
			fi
		elif ! echo "$1" | grep -q '[a-z]' \
			&& echo "$1" | grep -q '[0-9]'; then
			
			if $invert_OFF; then
				echo "(i) Charging enabled for $1s."
				sON
			else
				echo "(i) Charging disabled for $1s."
				sOFF
			fi
			sleep $1
		fi
		echo
		echo '(i) Timeount reached.'
		
		if $invert_OFF; then
			echo $c_OFF > $s
			echo '- Charging disabled.'
			sOFF
		else
			echo $c_ON > $s
			echo '- Charging re-enabled'
			sON
		fi
		
	else
		if $invert_OFF; then
			echo '(i) Charging enabled.'; sON
		else
			echo '(i) Charging disabled.'; sOFF
		fi
	fi
	echo
}


# Update config
update_cfg() {
	{ [ "$2" ] && echo p0=$2 || echo p0=10
	echo p=$1
	$autorun && echo auto_run=true || echo auto_run=false
	echo "i=\"$i\""
	echo "switch \"s=$s\" $c_ON $c_OFF"; } > $config
	. $config
	get_batt_level
}



# ENGINE

# Pre-ignition
auto_run=false
[ -d $tmp_dir ] || mkdir $tmp_dir
[ ! -f $config ] && get_ctrl_files && auto_run=true || . $config
get_batt_level
sON > $sON_info


# Toggle Auto-run
if [ "$1" = "-a" ]; then
	if [ -f $tmp_dir/_ ]; then
		rm [ -f $tmp_dir/_ ]
		echo "(i) cs service resumed."
	else
		if grep -q true $config; then
			sed -i "s/=true/=false/" $config
			echo "(i) cs service OFF"
		else
			sed -i "s/=false/=true/" $config
			echo "(i) cs service ON"
			echo "- Reboot to apply change."
		fi
	fi
	echo
	exit 0


# Manually set ctrl files
elif [ "$1" = "-c" ]; then
	exit_null () { echo "$1"; echo; exit 0; }
	echo "Paste/type your charging control config & hit ENTER (/path/to/file ON OFF):"
	read INPUT
	[ "$INPUT" ] && echo "switch \"s=$(echo "$INPUT" | cut -d' ' -f1)\" $(echo "$INPUT" | cut -d' ' -f2) $(echo "$INPUT" | cut -d' ' -f3)" > $mod_dir/.config/ctrl \
		|| exit_null "(i) Operation aborted (null input)."
	echo
	echo "Now paste/type your battery uevent path & hit ENTER (/path/to/file)..."
	echo "- If it's in the same directory as the charging control  file, skip the paste/type part -- simply hit ENTER:"
	read INPUT
	[ "$INPUT" ] && echo "i=\"$INPUT\"" >> $mod_dir/.config/ctrl
	echo
	exit 0


# cs service
elif [ "$1" = "auto" ]; then
	$auto_run || exit 0
	[ -f $config ] || update_cfg 90
	[ -f $tmp_dir/_ ] || echo $c_ON > $s

	until [ "$batt_level" -ge "$p" ]; do
		$auto_run || exit 0
		while [ -f $tmp_dir/_ ]; do sleep 25; done
		. $config
		get_batt_level
		[ "$batt_level" -ge "70" ] && sleep 25 || sleep 60
	done
	[ -f $tmp_dir/_ ] || echo $c_OFF > $s
	
	until [ "$batt_level" -le "$p0" ]; do
		$auto_run || exit 0
		grep -iq '=Charging' "$i" && break
		while [ -f $tmp_dir/_ ]; do sleep 300; done
		. $config
		get_batt_level
		[ "$batt_level" -le "25" ] && sleep 150 || sleep 300
	done
	cs auto


# Usage instructions
elif [ "$1" = '--help' ]; then
	cat <<EOD
Magic Charging Switch (cs)

Stops charging at a set % level below 100 to extend battery lifespan.

Note: your terminal emulator must be excluded from battery optimization &/or Doze for cs to work properly.


Usage:

cs [-a] [-c] [-i] [PAUSE% RESUME%] [PAUSE%] [debug] [-m PAUSE% RESUME%] [-t PAUSE% RESUME%] [-d TIMEOUT] [-e TIMEOUT] [--help]

-a --> toggle auto-run; resume cs service

-c --> manually set charging control & battery uevent configs

-i --> display battery info

debug --> gather debugging data & save it to /sdcard/cs_debug.zip

--help --> cs usage instructions

just "cs" --> run cs with default/saved settings

PAUSE% RESUME% --> pause charging at PAUSE% value; resume if battery drops below RESUME% (default 10). This is the initial setup command. If auto-run is OFF, the command works as is; else, new settings are saved and automatically recognized by cs service.

-m/-t PAUSE% RESUME% --> generate automation config (-m for MacroDroid; -t for Tasker -- pick one)

-d [TIMEOUT (optional)] --> disable charging on demand (pauses cs service)

-e [TIMEOUT (optional)] --> enable charging on demand (pauses cs service)


Usage Examples

"cs 85" --> pause charging at 85%; resume if battery level drops below 10% (default).

"cs 80 20" --> pause charging at 80%; resume if battery level drops below 20%.

"-d" & "-e" options can take a "timeout" argument to automatically enable & disable charging, respectively (i.e., "cs -d 30m" --> keep charging disabled for 30 minutes, "cs -e 1h" --> charge for 1 hour).

"cs -e 120 && cs -d 30m && cs -e 1h" --> charge for 120 seconds, pause for 30 minutes, then charge again for 1h.

"cs -e 30m && cs -d 30m && cs 90" --> charge for 30 minutes, pause for 30 minutes, then charge again, but this time until battery level is greater or equal to 90%.

Ideally, you want your battery level between 40-60% - best, 20-80% - average, 10-90% - fair.
EOD
echo
exit 0


elif [ "$1" = 'debug' ]; then debug


# Disable charging on demand
elif [ "$1" = '-d' ]; then
	if $auto_run && [ ! -f $tmp_dir/_ ]; then
		touch $tmp_dir/_
		echo "(i) cs service paused."
		echo
	fi
	[ "$2" ] && OFF $2 || OFF
	
	#if $auto_run; then
		#if [ "$2" ]; then
			#rm $tmp_dir/_
			#echo "(i) cs service resumed."
			#echo
		#else
			#echo "Resume cs service? (Y/n)"
			#read $INPUT
			#! echo $INPUT | grep -iq n && rm rm $tmp_dir/_ && echo "- Done."		
		#fi
	#fi
	
	if $auto_run && [ -f $tmp_dir/_ ]; then
		echo "(i) Resume cs service with \"cs -a\" command."
		echo "- A reboot also does the trick."
		echo
	fi
	exit 0


# Enable charging on demand
elif [ "$1" = '-e' ]; then
	if $auto_run && [ ! -f $tmp_dir/_ ]; then
		touch $tmp_dir/_
		echo "(i) cs service paused."
		echo
	fi
	invert_OFF=true
	[ "$2" ] && OFF $2 || OFF
	
	#if $auto_run; then
		#if [ "$2" ]; then
			#rm $tmp_dir/_
			#echo "(i) cs service resumed."
			#echo
		#else
			#echo "Resume cs service? (Y/n)"
			#read $INPUT
			#! echo $INPUT | grep -iq n && rm rm $tmp_dir/_ && echo "- Done."		
		#fi
	#fi
	
	if $auto_run && [ -f $tmp_dir/_ ]; then
		echo "(i) Resume cs service with \"cs -a\" command."
		echo "- A reboot also does the trick."
		echo
	fi
	exit 0


# Battery info
elif [ "$1" = '-i' ]; then
	echo 'Battery Info'
	cat "$i" | grep -Ev 'NAME|PRESENT|CAPACITY_LEVEL' \
		| sed 's/POWER_SUPPLY_//' \
		| sed 's/CAPACITY/LEVEL/' \
		| sed '/LEVEL=/s/$/%/' \
		| sed 's/_NOW//' \
		| sed '/RGE_R/s/GE/GING/'
	echo
	exit 0


# Run with default/saved settings
elif [ -z "$1" ]; then
	if [ ! -f $config ]; then
		echo "(i) No settings found."
		echo "- Applying defaults -- cs 90 10..."
		update_cfg 90
		echo
		sleep 2
	fi
	if $auto_run; then
		echo "(i) cs service is already running."
		echo
		exit 0
	fi
	echo $c_ON > $s
	
	until [ "$batt_level" -ge "$p" ]; do
		clear
		get_batt_level
		echo "Charging to $p%..."
		cat $sON_info
		echo
		c_info
		echo
		echo "(i) Press CTRL (Vol. Down) + C to abort."
		[ "$batt_level" -ge "75" ] && sleep 20 || sleep 60
	done
	c_loop


# Generate MacroDroid & Tasker automation configs
elif [ "$1" = "-m" ] || [ "$1" = "-t" ]; then
	if echo "$1" | grep -q 'm'; then
		echo "(i) Generating /sdcard/MacroDroid/charging_switch.category..."
		mdir=/sdcard/MacroDroid
		[ -d $mdir ] || mkdir -p $mdir
		cp /magisk/cs/.config/macrodroid $mdir/charging_switch.category
		cd $mdir
		sed -i "s/:90/:$2/" charging_switch.category
		sed -i "s/:11/:$3/" charging_switch.category
	elif echo "$1" | grep -q 't'; then
		echo "(i) Generating /sdcard/Tasker/projects/charging_switch.prj.xml..."
		tdir=/sdcard/Tasker/projects
		[ -d $tdir ] || mkdir -p $tdir
		cp /magisk/cs/.config/tasker $tdir/charging_switch.prj.xml
		cd $tdir
		sed -i "/<Int sr=\"arg0\" val=\"90\"\/>/s/90/$2/" charging_switch.prj.xml
		sed -i "/<rhs>90<\/rhs>/s/90/$2/" charging_switch.prj.xml
		sed -i "/<Int sr=\"arg1\" val=\"10\"\/>/s/10/$3/" charging_switch.prj.xml
		sed -i "/<rhs>10<\/rhs>/s/10/$3/" charging_switch.prj.xml
	else exxit
	fi
	echo "- Done"
	echo
	exit 0


# Run with all parameters (initial setup)
elif echo "$1" | grep -q '[0-9]'; then

	[ "$2" ] && update_cfg "$1" "$2" || update_cfg "$1"

	echo "(i) New settings saved."
	sleep 1.5

	if $autorun; then
		echo "- cs service is already running"
		echo "-- Now working with the new values"
		echo
		exit 0
	fi
	echo $c_ON > $s
	
	until [ "$batt_level" -ge "$1" ]; do
		clear
		get_batt_level
		echo "Charging to $1%..."
		cat $sON_info
		echo
		c_info
		echo
		echo "(i) Press CTRL (Vol. Down) + C to abort."
		[ "$batt_level" -ge "75" ] && sleep 20 || sleep 60
	done

	. $config
	c_loop


else exxit
fi