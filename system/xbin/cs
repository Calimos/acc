#!/system/bin/sh

# Magic Charging Switch (cs)
# VR25 @ XDA Developers


# Environment
h=/data/.cs_settings
st=/data/.cs_sON
export PATH=/dev/magisk/bin:/magisk/cs/bin:$PATH
echo


# Toolbox

c_info() {
	cat "$i" | grep -vE 'NAME|STATUS|PRESENT|HEALTH|COUNTER' \
		| sed 's/POWER_SUPPLY_//' \
		| sed 's/CAPACITY/LEVEL/' \
		| sed '/LEVEL=/s/$/%/' \
		| sed 's/_NOW//' \
		| sed '/RGE_R/s/GE/GING/'
}

c_loop() {
	echo
	echo "(i) Desired charge % reached"
	sOFF
	#rm -f /data/system/batterystats.bin 2>/dev/null
	rm -f $st
	echo $c_OFF > $s
	if echo "$p0" | grep -q [0-9]; then
		echo "- Maintaining $p0-$p%..."
		. "$i"
		until [ "$POWER_SUPPLY_CAPACITY" -le "$p0" ]; do
			. "$i"
			[ "$POWER_SUPPLY_CAPACITY" -le "25" ] && sleep 450 || sleep 900
		done
		cs
		exit 0
	else
		echo "- Press RETURN to re-enable charging & exit"
		read INPUT
		echo $c_ON > $s
		exit 0
	fi
}

ctrl_file() {
	if model 'Pixel|HTC'; then switch charger_control 0 1
	elif model 'Galaxy Note'; then switch store_mode 0 1
		[ -f "$s" ] || switch s=/sys/devices/platform/battery/power_supply/battery/store_mode 0 1
	elif ! model 'Galaxy Note' && model Samsung; then switch /batt_slate_mode 0 1
		[ -f "$s" ] || switch s=/sys/devices/platform/battery/power_supply/battery/batt_slate_mode 0 1
		[ -f "$s" ] || switch s=/sys/devices/battery/power_supply/battery/batt_slate_mode 0 1
	elif model Huawei; then switch s=/sys/class/hw_power/charger/charge_data/enable_charger
		[ -f "$s" ] || switch s=/sys/devices/platform/huawei_charger/enable_charger
	elif model 'Amazon Fire'; then switch "/device/Charging_Enable"
	elif model 'Nexus 4|mako'; then switch s=/sys/module/pm8921_charger/parameters/disabled 0 1
	elif model 'Nexus 10'; then switch "s=/sys/devices/platform/s3c2440-i2c.2/i2c-2/2-0006/power_supply/smb347-battery/charge_enabled"
	elif model 'Nvidia Shield'; then switch "s=/sys/devices/platform/7000c400.i2c/i2c-1/1-006b/charging_state" enabled disabled
	elif model 'Xiaomi Mi6'; then switch input_suspend 0 1
	elif model 'Xiaomi MiPad 2'; then switch s=/sys/class/power_supply/bq2589x_charger/enable_charging
	elif model 'hammerhead|Nexus 5'; then switch s=/sys/class/power_supply/ac/charging_enabled
		[ -f "$s" ] || switch "s=/sys/devices/f9923000.i2c/i2c-84/84-006b/power_supply/ac/charging_enabled"
	elif model 'Teclast X98 Air III'; then switch s=/sys/class/power_supply/dollar_cove_charger/present
	elif model 'Nexus 9'; then switch "s=/sys/devices/platform/tegra12-i2c.0/i2c-0/0-006b/charging_state" enabled disabled
	elif model 'Galaxy Nexus'; then switch charge_enabled
	elif model 'Xiaomi Redmi Note 2'; then switch s=/sys/devices/platform/battery/ChargerEnable
	fi
	
	# Devices confirmed working with standard/generic control file
	# OnePlus 3, Moto Z Play, Sony Xperia Z5 Premium
	
	[ -f "$s" ] || switch charging_enabled # It appears this one is the most common among devices running near-stock Android.
	[ -f "$s" ] || switch battery_charging_enabled
	
	# User setup
	if [ -f /sdcard/cs_ctrl.txt ]; then
		. /sdcard/cs_ctrl.txt
		if [ ! -f "$s" ]; then
			echo "(!) cs: The specified control file doesn't exist"
			echo
			debug
		fi
	fi
	
	if [ ! -f "$s" ]; then echo "(!) cs: Unsupported device"
		echo
		debug
	fi
	
	i="$(dirname "$s")/uevent"
	model 'Nexus 4|mako' && i="/sys/devices/platform/msm_ssbi.0/pm8921-core/pm8921-charger/power_supply/battery/uevent"
}

debug() {
	echo "(i) Gathering debugging data..."
	echo
	rm -rf /data/cs_debug* /sdcard/cs_debug* 2>/dev/null
	mkdir /data/cs_debug
	cd /data/cs_debug
	getprop | grep product > cs_debug.log
	echo >> cs_debug.log
	zip -9u cs_debug.zip cs_debug.log
	
	for f in $(find /sys 2>/dev/null \
		| grep -Ev 'sys/kernel|sys/bus|sys/firmware|/sys/fs' \
		| grep -Ei 'batt|charg'); do
		if [ -f "$f" ]; then
			echo "$f" >> cs_debug.log
			zip -9qqu cs_debug.zip "$f"
		fi
	done

	echo
	mv cs_debug.zip /sdcard
	mv cs_debug.log /sdcard
	chmod 777 /sdcard/cs_debug*
	rm -rf /data/cs_debug 2>/dev/null
	echo Done
	echo
	echo "(i) Please upload /sdcard/cs_debug.log & /sdcard/cs_debug.zip files to the official XDA thread"
	echo
	exit 0
}

exxit() {
	echo "(!) cs: Invalid option/argument"
	cs --help
	exit 1
}

model() { getprop | grep -Eiq "$1"; }
sON() { echo "- S/ON --> $(date)"; }
sON > $st
sOFF() { echo "- S/OFF --> $(date)"; }

switch() {
	echo "$1" | grep -q 's=' && s="$(echo "$1" | cut -d= -f2)" \
	|| s=/sys/class/power_supply/battery/"$1"
	if [ "$2" ]; then
		c_ON=$2
		c_OFF=$3
	else
		c_ON=1
		c_OFF=0
	fi
}


if [ "$1" = '--help' ]; then
	cat <<eot
Magic Charging Switch (cs)

Stops charging at a set % level below 100 to extend battery lifespan. Battery stats are cleared automatically.

Note: your terminal emulator must be excluded from battery optimization &/or Doze for cs to work properly.


Usage:

cs -i --> show battery info

cs % % --> pause charging at first %; resume charging if battery drops below second % (optional)

cs debug --> gather debugging data & save it to /sdcard as cs_debug*

cs --help --> self-explanatory

just "cs" --> run cs with previous settings

cs -d [timeout (optional)] --> disable charging

cs -e [timeout (optional)] --> enable charging


Tips

"cs 80" --> stop charging at 80%.

"cs 80 20" --> pause charging at 80%; resume if battery drops below 20%.

"-d" & "-e" options can take a "timeout" argument to automatically enable & disable charging, respectively (i.e., "cs -d 30m" --> keep charging disabled for 30 minutes, "cs -e 1h" --> charge for 1 hour).

"cs -e 120 && cs -d 30m && cs -e 1h" --> charge for 120 seconds, pause for 30 minutes, then charge again for 1h.

"cs -e 30m && cs -d 30m && cs 90" --> charge for 30 minutes, pause for 30 minutes, then charge again, but this time until battery level is greater or equal to 90%.
eot
echo
exit 0


elif [ "$1" = 'debug' ]; then debug


# Disable charging
elif [ "$1" = '-d' ]; then
	ctrl_file
	echo $c_OFF > $s
	if [ "$2" ]; then
		if echo "$2" | grep -Eq '[a-z]{1}'; then
			echo "(i) Charging disabled for $2"
			sOFF
			if echo "$2" | grep -q 'm'; then sleep $(( 60 * $(echo $2 | grep -ov 'm') ))
			elif echo "$2" | grep -q 'h'; then sleep $(( 3600 * $(echo $2 | grep -ov 'h') ))
			else exxit; fi
		else
			echo "(i) Charging disabled for $2s"
			sOFF
			sleep $2; fi
		echo
		echo '(i) Timeount reached'
		echo $c_ON > $s
		echo '- Charging re-enabled'
		sON
	else echo '(i) Charging disabled'; sOFF; fi
	echo
	exit 0
	

# Enable charging	
elif [ "$1" = '-e' ]; then
	ctrl_file
	echo $c_ON > $s
	if [ "$2" ]; then 
		if echo "$2" | grep -Eq '[a-z]{1}'; then
			echo "(i) Charging enabled for $2"
			sON
			if echo "$2" | grep -q 'm'; then sleep $(( 60 * $(echo $2 | grep -ov 'm') ))
			elif echo "$2" | grep -q 'h'; then sleep $(( 3600 * $(echo $2 | grep -ov 'h') ))
			else exxit; fi
		else
			echo "(i) Charging enabled for $2s"
			sON
			sleep $2; fi
		echo
		echo '(i) Timeount reached'
		echo $c_OFF > $s
		echo '- Charging disabled'
		sOFF
	else echo '(i) Charging enabled'; sON; fi
	echo
	exit 0


# Battery info
elif [ "$1" = '-i' ]; then
	ctrl_file
	echo 'Battery Info'
	cat "$i" | grep -Ev 'NAME|PRESENT' \
		| sed 's/POWER_SUPPLY_//' \
		| sed 's/CAPACITY/LEVEL/' \
		| sed '/LEVEL=/s/$/%/' \
		| sed 's/_NOW//' \
		| sed '/RGE_R/s/GE/GING/'
	echo
	exit 0


# Run with previous settings
elif [ -z "$1" ]; then
	ctrl_file
	echo $c_ON > $s
	if [ ! -f "$h" ]; then clear; cs --help; exit 0; fi
	. $h
	. "$i"
	
	until [ "$POWER_SUPPLY_CAPACITY" -ge "$p" ]; do
		clear
		. "$i"
		echo "Charging to $p%..."
		cat $st
		echo
		c_info
		echo
		echo "(i) Press CTRL (Vol. Down) + C to abort"
		[ "$POWER_SUPPLY_CAPACITY" -ge "75" ] && sleep 20 || sleep 60
	done
	c_loop


elif echo "$1" | grep -q [0-9]; then :
else exxit; fi


# Generate Tasker XML
echo "(i) Generating /sdcard/Tasker/projects/cs_tasker.prj.xml..."
xml_gen=false
tdir=/sdcard/Tasker/projects
[ -d $tdir ] || mkdir -p $tdir
cp /magisk/cs/cs_tasker.prj.xml $tdir
cd $tdir
sed -i "/<Int sr=\"arg0\" val=\"80\"\/>/s/80/$1/" cs_tasker.prj.xml
sed -i "/<rhs>80<\/rhs>/s/80/$1/" cs_tasker.prj.xml
if [ "$2" ]; then
	sed -i "/<Int sr=\"arg1\" val=\"10\"\/>/s/10/$2/" cs_tasker.prj.xml
	sed -i "/<rhs>10<\/rhs>/s/10/$2/" cs_tasker.prj.xml
echo "- Done"
echo
fi


# Run with all parameters (initial setup)
ctrl_file
echo $c_ON > $s
. "$i"

until [ "$POWER_SUPPLY_CAPACITY" -ge "$1" ]; do
	$xml_gen && clear
	xml_gen=true
	. "$i"
	echo "Charging to $1%..."
	cat $st
	echo
	c_info
	echo
	echo "(i) Press CTRL (Vol. Down) + C to abort"
	[ "$POWER_SUPPLY_CAPACITY" -ge "75" ] && sleep 20 || sleep 60
done

echo "p=$1" > $h
echo "p0=$2" >> $h

. $h
c_loop
