#!/system/bin/sh
# Magic Charging Switch (cs)
# VR25 @ XDA Developers


# ENVIRONMENT
export PATH=$PATH:/sbin/.core/busybox:/dev/magisk/bin
ModPath=$(grep loop /proc/mounts | cut -d' ' -f2 | grep -Ev 'system|dev')/cs
persist_dir=/data/media/cs
config=$persist_dir/config
DeviceName=$(grep -i product.name /system/build.prop | cut -d= -f2 | sed 's/ /_/g')
csVersion=$(grep -i versionCode $ModPath/module.prop | cut -d= -f2)
verbose_log=$persist_dir/cs_verbose-$DeviceName.log
last_verbose_log=$persist_dir/last_cs_verbose-$DeviceName.log
[ "$service_is_running" ] || service_is_running=false


# ROOT CHECK
echo
whoami | grep -q root || exec echo -e "(!) cs must be run as root.\n"


# VERBOSE LOGGER
[ -f $verbose_log ] && mv -f $verbose_log $last_verbose_log
if [ -f $persist_dir/enable_verbose ]; then

	if ! $service_is_running && [ "$1" -ne "-v" ]; then
		echo "(!) WARNING: verbose is enabled."
		echo "- Don't forget to disable it after finishing debugging."
		echo "- Else, in the long run, your device's internal storage will be filled up and system will eventually crash or freeze!"
		echo
		sleep 7
	fi

	grep -i product /system/build.prop > $verbose_log
	echo >> $verbose_log
	echo "csVersion=$csVersion" >> $verbose_log
	echo >> $verbose_log
	set -x 2>>$verbose_log
fi


# TOOLBOX

# I'm the lazy type
is() { [ -$1 "$2" ]; }
n() { [ "$1" ]; }
z() { [ -z "$1" ]; }

# Charging info
c_info() {
	cat "$uevent" | grep -vE 'NAME|STATUS|PRESENT|HEALTH|COUNTER|CAPACITY_LEVEL' \
		| sed 's/POWER_SUPPLY_//' \
		| sed 's/CAPACITY/LEVEL/' \
		| sed '/LEVEL=/s/$/%/' \
		| sed 's/_NOW//' \
		| sed '/RGE_R/s/GE/GING/'
}


# Charging loop
c_loop() {
	switch_ON
	until auto_run && ! pause_svc; do
		until [ "$batt_level" -ge "$1" ]; do
			clear
			get_batt_level
			echo "Charging to $1%..."
			echo "$start_time"
			echo
			c_info
			echo
			echo "(i) Press CTRL (Vol. Down) + C to abort."
			[ "$batt_level" -ge "75" ] && sleep 25 || sleep 60
		done

		switch_OFF
		echo
		echo "(i) Desired charge % reached."
		end_time
		echo "- Charging paused; battery stats cleared."
		# Reset battery stats
		dumpsys batterystats --reset &>/dev/null
		echo

		echo "(i) Waiting until $lower_limit% to restart the cycle..."
		echo "- Press CTRL (Vol. Down) + C to abort."
		until [ "$batt_level" -le "$lower_limit" ]; do
			get_batt_level
			[ "$batt_level" -le "25" ] && sleep 25 || sleep 60
		done
		switch_ON
	done
	exit 0
}


get_ctrl_files() {
	if [ -f $persist_dir/manual_ctrl ]; then . $persist_dir/manual_ctrl

	else
		echo "(i) Checking compatibility..."
		is f $persist_dir/sys_cache || find /sys 2>/dev/null | grep -iv log | grep -Ei 'batt|charg' > $persist_dir/sys_cache
		
		for uevent_file in $(cat $persist_dir/sys_cache | grep -i "battery/uevent"); do
			if grep -qs POWER_SUPPLY_CAPACITY "$uevent_file"; then
				uevent="$uevent_file"
				break
			fi
		done
		
		if [ ! -f "$uevent" ]; then
			echo
			echo "(!) Unsupported device."
			echo
			debug
		fi
		
		for ctrl_file in $(grep -v '#' $ModPath/config/ctrl_files_db | sed 's/ /+/'); do
			if grep -Eiq "$(echo "$ctrl_file" | cut -d'+' -f1)" $persist_dir/sys_cache; then
				echo "$ctrl_file" | sed 's/+/ /' | grep -q ' ' \
					&& SWITCH "$(grep -Ei "$(echo "$ctrl_file" | cut -d'+' -f1)" $persist_dir/sys_cache)" $(echo "$ctrl_file" | cut -d'+' -f2,3 | sed 's/+/ /') \
					|| SWITCH "$(grep -Ei "$(echo "$ctrl_file" | cut -d'+' -f1)" $persist_dir/sys_cache)"
				break
			fi
		done
		
		if [ ! -f "$SWITCH" ]; then
			echo
			echo "(!) Unsupported device."
			echo
			debug
		fi
		echo "- OK"
		echo
	fi
}



debug() {
	echo "(i) Gathering debugging data..."
	#sestatus | grep -qi enforcing && setenforce 0 && se_0=false || se_0=true
	rm -rf /data/cs_debug* /sdcard/cs_debug* 2>/dev/null
	mkdir /data/cs_debug
	cd /data/cs_debug
	grep -i product /system/build.prop > cs_debug.log
	echo >> cs_debug.log
	echo "csVersion=$csVersion" >> cs_debug.log
	echo >> cs_debug.log
	
	is f $persist_dir/sys_cache || find /sys 2>/dev/null | grep -iv log | grep -Ei 'batt|charg' > $persist_dir/sys_cache
	cat $persist_dir/sys_cache >> cs_debug.log
	zip -9qq cs_debug.zip cs_debug.log 2>/dev/null
	zip -9qqu cs_debug.zip $persist_dir/* -x $persist_dir/sys_cache 2>/dev/null
	
	for TARGET in $(cat $persist_dir/sys_cache); do
		zip -9qqu cs_debug.zip "$TARGET" 2>/dev/null
	done
	
	mv cs_debug.zip /sdcard/cs_debug-$DeviceName.zip
	[ -f /sdcard/cs_debug-$DeviceName.zip ] || mv cs_debug.log /sdcard/cs_debug-$DeviceName.log
	chmod 777 /sdcard/cs_debug*
	rm -rf /data/cs_debug 2>/dev/null
	echo "- Done."
	echo
	file_type() { echo "(i) Please upload /sdcard/cs_debug-$DeviceName.$1 to the official XDA thread."; }
	[ -f /sdcard/cs_debug-$DeviceName.zip ] && file_type zip || file_type log
	#$se_0 || setenforce 1
	echo
	exit 0
}


exxit() {
	echo "(!) Invalid option/argument"
	echo "- Run \"cs -h\" for help"
	echo
	exit 1
}


start_time() { echo "- Start time: $(date +'%F %T')"; }
end_time() { echo "- End time: $(date +'%F %T')"; }


SWITCH() {
	SWITCH="$1"
	if [ "$2" ]; then
		c_ON=$2
		c_OFF=$3
	else
		c_ON=1
		c_OFF=0
	fi
}


OFF() {
	$invert_OFF && switch_ON || switch_OFF
	if [ "$1" ]; then
		if echo "$1" | grep -q '[a-z]'; then
		
			if $invert_OFF; then
				echo "(i) Charging enabled for $1."
				start_time
			else
				echo "(i) Charging disabled for $1."
				end_time
			fi
			
			if echo "$1" | grep -q 'm'; then
				sleep $(( 60 * $(echo $1 | sed 's/m//') ))
			elif echo "$1" | grep -q 'h'; then
				sleep $(( 3600 * $(echo $1 | sed 's/h//') ))
			else exxit
			fi
		elif ! echo "$1" | grep -q '[a-z]' \
			&& echo "$1" | grep -q '[0-9]'; then
			
			if $invert_OFF; then
				echo "(i) Charging enabled for $1s."
				start_time
			else
				echo "(i) Charging disabled for $1s."
				end_time
			fi
			sleep $1
		fi
		echo
		echo '(i) Timeount reached.'
		
		if $invert_OFF; then
			switch_OFF
			echo '- Charging disabled.'
			end_time
		else
			switch_ON
			echo '- Charging re-enabled'
			start_time
		fi
		
	else
		if $invert_OFF; then
			echo '(i) Charging enabled.'
			start_time
		else
			echo '(i) Charging disabled.'
			end_time
		fi
	fi
	echo
}


OFF_percent() {
	if $invert_OFF; then
		switch_ON
		echo "(i) Charging enabled until $1."
		start_time
	else
		switch_OFF
		echo "(i) Charging disabled until $1."
		end_time
	fi

	echo
	until [ "$batt_level" -eq "$(echo $1 | sed 's/%//')" ]; do
		get_batt_level
		sleep 10
	done
	echo '(i) Desired % reached.'
		
	if $invert_OFF; then
		switch_OFF
		echo '- Charging disabled.'
		end_time
	else
		switch_ON
		echo '- Charging re-enabled'
		start_time
	fi
	echo
}


auto_run() { [ -f $persist_dir/auto_run ]; }
pause_svc() { [ -f $persist_dir/pause_svc ]; }
charging() { grep -iq "=charging" "$uevent"; }
get_batt_level() { read batt_level <<< $(cat "$(dirname "$uevent")/capacity"); }

switch_OFF() { echo $c_OFF > "$SWITCH"; }
switch_ON() { echo $c_ON > "$SWITCH"; }

get_limits() {
	read higher_limit <<< $(grep higher_limit $config | cut -d= -f2)
	read lower_limit <<< $(grep lower_limit $config | cut -d= -f2)
}


# Update config
update_cfg() {
	[ -f $config ] && . $config
	is f $persist_dir/manual_ctrl && . $persist_dir/manual_ctrl
	
	if is f $config && [ -z "$1" ]; then
		{ echo higher_limit=$higher_limit
		echo lower_limit=$lower_limit; } > $config
	else
		{ [ "$1" ] && echo higher_limit=$1 || echo higher_limit=90
		[ "$2" ] && echo lower_limit=$2 || echo lower_limit=10; } > $config 
	fi
	
	{ echo "uevent=\"$uevent\""
	echo "SWITCH \"$SWITCH\" $c_ON $c_OFF"; } >> $config
	. $config
	get_batt_level
}



# ENGINE

# Pre-ignition
[ -d $persist_dir ] || mkdir $persist_dir
if ! echo "$1" | grep -Eq '\-c|\-v|debug'; then
	[ -f $config ] && . $config || get_ctrl_files
	get_batt_level
	if ! auto_run || pause_svc; then read start_time <<< "$(start_time)"; fi
	invert_OFF=false
fi


# Manually set charging ctrl config
if [ "$1" = "-c" ]; then
	if [ -z "$2" ]; then
		echo "(!) Missing argument(s)."
		echo "- Syntax: \"cs -c /path/to/ctrl/file ON OFF\""
		echo "-- \"ON OFF\" defaults: 1 0"
		echo
		exit 1
	fi
		
	echo "SWITCH \"$2\" $3 $4" > $persist_dir/manual_ctrl
	echo "(i) Checking compatibility..."
	is f $persist_dir/sys_cache || find /sys 2>/dev/null | grep -iv log | grep -Ei 'batt|charg' > $persist_dir/sys_cache
	
	for uevent_file in $(cat $persist_dir/sys_cache | grep -i "battery/uevent"); do
		if grep -qs POWER_SUPPLY_CAPACITY "$uevent_file"; then
			echo "uevent=\"$uevent_file\"" >> $persist_dir/manual_ctrl
			break
		fi
	done
	
	. $persist_dir/manual_ctrl
	if [ ! -f "$SWITCH" ]; then
		echo
		echo "(!) Control file not found."
			
		if [ ! -f "$uevent" ]; then
			echo
			echo "(!) Battery uevent file not found"
			echo "- Unsupported device."
			rm $persist_dir/manual_ctrl
			echo
			debug
		fi
			
		rm $persist_dir/manual_ctrl
		echo
		exit 1
	fi
		
	if [ ! -f "$uevent" ]; then
		echo
		echo "(!) Battery uevent file not found"
		echo "- Unsupported device."
		rm $persist_dir/manual_ctrl
		echo
		debug
	fi
	
	update_cfg
	echo "- All set."
	echo
	exit 0
		

elif [ "$1" = 'debug' ]; then debug


# Toggle verbose
elif [ "$1" = "-v" ]; then
	if [ -f $persist_dir/enable_verbose ]; then
		rm $persist_dir/enable_verbose
		echo "(i) verbose OFF"
		if auto_run && ! pause_svc; then
			rm $persist_dir/auto_run
			echo "- CS service stopped."
		fi
	else
		touch $persist_dir/enable_verbose
		echo "(i) verbose ON"
		echo
		echo "(!) WARNING: don't forget to disable this after finishing debugging."
		echo "- Else, in the long run, your device's internal storage will be filled up and system will eventually crash or freeze!"
	fi
	echo
	exit 0


# Toggle Auto-run
elif [ "$1" = "-s" ]; then
	if pause_svc; then
		rm $persist_dir/pause_svc
		switch_ON
		echo "(i) CS service resumed."
	else
		if auto_run; then
			rm $persist_dir/auto_run
			echo "(i) CS service OFF"
		else
			touch $persist_dir/auto_run
			echo "(i) CS service ON"
			echo "- Reboot to apply change."
		fi
	fi
	echo
	exit 0


# Keep/maintain battery power at a constant level
elif [ "$1" = '-k' ]; then
	if auto_run && ! pause_svc; then
		touch $persist_dir/pause_svc
		echo "(i) CS service paused."
		echo "- Reboot the system or simply run \"cs -s\" to resume."
		echo
	fi
	
	echo "Maintaining $2%..."
	echo "(i) Press CTRL (Vol. Down) + C to abort."
	switch_ON

	while :; do
		until [ "$batt_level" -ge "$2" ] || ! charging; do
			sleep 25
			get_batt_level
		done
		[ "$batt_level" -ge "$2" ] && switch_OFF
	
		until [ "$batt_level" -le "$2" ] || charging; do
			sleep 60
			get_batt_level
		done
		[ "$batt_level" -le "$2" ] && switch_ON
	done
	exit 0


# Reset battery stats on demand
elif [ "$1" = "-r" ]; then
	dumpsys batterystats --reset
	echo
	exit 0


# CS service
elif [ "$1" = "service" ]; then
	touch > $persist_dir/last_service_run
	[ -f $config ] || update_cfg
	auto_run || exit 0
	switch_ON
	
	get_limits
	echo "$higher_limit|$lower_limit"
	while auto_run; do
		until [ "$batt_level" -ge "$higher_limit" ] || ! charging; do
			get_limits
			get_batt_level
			[ "$batt_level" -ge "75" ] && sleep 25 || sleep 60
		done
		if [ "$batt_level" -ge "$higher_limit" ] && ! pause_svc; then
			switch_OFF
			dumpsys batterystats --reset &>/dev/null
		fi

		until [ "$batt_level" -le "$lower_limit" ] || charging; do
			get_limits
			get_batt_level
			[ "$batt_level" -le "25" ] && sleep 25 || sleep 60
		done
		if [ "$batt_level" -le "$lower_limit" ] && ! pause_svc; then
			switch_ON
		fi
	done
	exit 0


# Usage instructions
elif [ "$1" = "-h" ]; then
	cat <<EOD
Magic Charging Switch (cs)

Automatically pauses/resumes charging at set time intervals and/or % levels to extend battery lifespan.


Usage:

cs [-c] [-h] [-i] [-r] [-s] [-v] [debug] [-k LEVEL] [PAUSE% RESUME%] [PAUSE%] [-m PAUSE% RESUME%] [-t PAUSE% RESUME%] [-d %/TIMEOUT] [-e %/TIMEOUT]

-c --> manually set charging control file config (/path/to/ctrl/file ON OFF)

-h --> cs usage instructions

-i --> display battery info

-r --> reset battery stats on demand (does not work on all devices)

-s --> toggle auto-run; resume CS service

-v --> toggle verbose (extensive log -- debugging)

debug --> gather debugging data & save it to /sdcard/cs_debug.zip

just "cs" --> run CS with default/saved settings

-k LEVEL --> keep/maintain battery power at a constant LEVEL (pauses CS service)

PAUSE% RESUME% --> pause charging at PAUSE% value; resume if battery drops below RESUME% (default 10). This is the INITIAL SETUP COMMAND. If auto-run is OFF, the command works as is; else, new settings are saved and automatically picked up by CS service.

-m/-t PAUSE% RESUME% --> generate automation config (-m for MacroDroid; -t for Tasker -- pick one)

-d [%/TIMEOUT (optional)] --> disable charging on demand (pauses CS service)

-e [%/TIMEOUT (optional)] --> enable charging on demand (pauses CS service)


Usage Examples/Tips

"cs 85" --> pause charging at 85%; resume when battery level is less or equal to 10% (default).

"cs 80 20" --> pause charging at 80%; resume when battery level is less or equal to 20%.

"cs -d" --> disable charging.

"cs -d" --> enable charging. 

"cs -d 30m" --> keep charging disabled for 30 minutes.

"cs -e 1h" --> keep charging enabled for 1 hour. 

"cs -e 80%" --> Charge until battery level equals 80%.

"cs -d 40%" --> Charge until battery level equals 40%.

"cs -e 120 && cs -d 30m && cs -e 1h" --> charge for 120 seconds, pause for 30 minutes, then charge again for 1h.

"cs -e 30m && cs -d 30m && cs -e 90%" --> charge for 30 minutes, pause for 30 minutes, then charge again, but this time until battery level is greater or equal to 90%.

"cs -e 50% && cs -d 5h && cs -e 80% && cs -d 30m && cs -e 90%" --> charge until 50%, pause for 5 hours, charge until 80%, pause for 30 minutes, charge until 90%.

Ideally, you want your battery level between 40-60% - best, 20-80% - average, 10-90% - fair.

Another perspective: 40-60% - extremely light users, 20-80% - average users, 10-90% - power users
EOD
echo
exit 0


# Disable charging on demand
elif [ "$1" = '-d' ]; then
	if auto_run && ! pause_svc; then
		touch $persist_dir/pause_svc
		echo "(i) CS service paused."
		echo
	fi
	
	if [ "$2" ]; then echo "$2" | grep -q '%' && OFF_percent $2 || OFF $2
	else OFF; fi

	if auto_run && pause_svc; then
		echo "(i) Reboot the system or simply run \"cs -s\" to resume CS service."
		echo
	fi
	exit 0


# Enable charging on demand
elif [ "$1" = '-e' ]; then
	if auto_run && ! pause_svc; then
		touch $persist_dir/pause_svc
		echo "(i) CS service paused."
		echo
	fi
	
	invert_OFF=true
	if [ "$2" ]; then echo "$2" | grep -q '%' && OFF_percent $2 || OFF $2
	else OFF; fi
	
	if auto_run && pause_svc; then
		echo "(i) Reboot the system or simply run \"cs -s\" to resume CS service."
		echo
	fi
	exit 0


# Battery info
elif [ "$1" = '-i' ]; then
	echo 'Battery Info'
	cat "$uevent" | grep -Ev 'NAME|PRESENT|CAPACITY_LEVEL' \
		| sed 's/POWER_SUPPLY_//' \
		| sed 's/CAPACITY/LEVEL/' \
		| sed '/LEVEL=/s/$/%/' \
		| sed 's/_NOW//' \
		| sed '/RGE_R/s/GE/GING/'
	echo
	echo "Current Settings"
	cat $config
	if auto_run; then pause_svc && echo "service status: paused" \
		|| echo "service status: ON"
	else echo "service status: OFF"; fi
	echo
	exit 0


# Run with default/saved settings
elif [ -z "$1" ]; then
	if [ ! -f $config ]; then
		echo "(i) No settings found."
		echo "- Applying defaults -- cs 90 10..."
		update_cfg
		echo
		sleep 1
	fi
	if auto_run && ! pause_svc; then
		echo "(i) CS service is already running."
		echo
		exit 0
	fi

	c_loop $higher_limit


# Generate MacroDroid & Tasker automation configs
elif [ "$1" = "-m" ] || [ "$1" = "-t" ]; then
	if echo "$1" | grep -q '\-m'; then
		echo "(i) Generating /sdcard/MacroDroid/charging_switch.category..."
		mdir=/sdcard/MacroDroid
		[ -d $mdir ] || mkdir -p $mdir
		cp /magisk/cs/config/macrodroid $mdir/charging_switch.category
		cd $mdir
		sed -i "s/:90/:$2/" charging_switch.category
		sed -i "s/:11/:$3/" charging_switch.category
	elif echo "$1" | grep -q '\-t'; then
		echo "(i) Generating /sdcard/Tasker/projects/charging_switch.prj.xml..."
		tdir=/sdcard/Tasker/projects
		[ -d $tdir ] || mkdir -p $tdir
		cp /magisk/cs/config/tasker $tdir/charging_switch.prj.xml
		cd $tdir
		sed -i "/<Int sr=\"arg0\" val=\"90\"\/>/s/90/$2/" charging_switch.prj.xml
		sed -i "/<rhs>90<\/rhs>/s/90/$2/" charging_switch.prj.xml
		sed -i "/<Int sr=\"arg1\" val=\"10\"\/>/s/10/$3/" charging_switch.prj.xml
		sed -i "/<rhs>10<\/rhs>/s/10/$3/" charging_switch.prj.xml
	else exxit
	fi
	echo "- Done."
	echo
	exit 0


# Run with all parameters (initial setup)
elif echo "$1" | grep -q '[0-9]'; then
	[ "$2" ] && update_cfg "$1" "$2" || update_cfg "$1"
	echo "(i) New settings saved."
	sleep 1

	if auto_run && ! pause_svc; then
		echo "- CS service is already running."
		echo "-- Now working with the new values."
		echo
		exit 0
	fi
	
	c_loop $1


else exxit
fi
